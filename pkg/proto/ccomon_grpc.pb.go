// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: ccomon.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CCOMonitoringServiceClient is the client API for CCOMonitoringService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CCOMonitoringServiceClient interface {
	GetRsrpReports(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (CCOMonitoringService_GetRsrpReportsClient, error)
	GetCellInfo(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (CCOMonitoringService_GetCellInfoClient, error)
	SetCellPTX(ctx context.Context, in *CellInfo, opts ...grpc.CallOption) (*Response, error)
	GetOcn(ctx context.Context, in *GetOcnRequest, opts ...grpc.CallOption) (*GetOcnResponse, error)
}

type cCOMonitoringServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCCOMonitoringServiceClient(cc grpc.ClientConnInterface) CCOMonitoringServiceClient {
	return &cCOMonitoringServiceClient{cc}
}

func (c *cCOMonitoringServiceClient) GetRsrpReports(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (CCOMonitoringService_GetRsrpReportsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CCOMonitoringService_ServiceDesc.Streams[0], "/cco_mon_service.CCOMonitoringService/GetRsrpReports", opts...)
	if err != nil {
		return nil, err
	}
	x := &cCOMonitoringServiceGetRsrpReportsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CCOMonitoringService_GetRsrpReportsClient interface {
	Recv() (*RsrpInfo, error)
	grpc.ClientStream
}

type cCOMonitoringServiceGetRsrpReportsClient struct {
	grpc.ClientStream
}

func (x *cCOMonitoringServiceGetRsrpReportsClient) Recv() (*RsrpInfo, error) {
	m := new(RsrpInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cCOMonitoringServiceClient) GetCellInfo(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (CCOMonitoringService_GetCellInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &CCOMonitoringService_ServiceDesc.Streams[1], "/cco_mon_service.CCOMonitoringService/GetCellInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &cCOMonitoringServiceGetCellInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CCOMonitoringService_GetCellInfoClient interface {
	Recv() (*CellInfo, error)
	grpc.ClientStream
}

type cCOMonitoringServiceGetCellInfoClient struct {
	grpc.ClientStream
}

func (x *cCOMonitoringServiceGetCellInfoClient) Recv() (*CellInfo, error) {
	m := new(CellInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cCOMonitoringServiceClient) SetCellPTX(ctx context.Context, in *CellInfo, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cco_mon_service.CCOMonitoringService/SetCellPTX", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cCOMonitoringServiceClient) GetOcn(ctx context.Context, in *GetOcnRequest, opts ...grpc.CallOption) (*GetOcnResponse, error) {
	out := new(GetOcnResponse)
	err := c.cc.Invoke(ctx, "/cco_mon_service.CCOMonitoringService/GetOcn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CCOMonitoringServiceServer is the server API for CCOMonitoringService service.
// All implementations must embed UnimplementedCCOMonitoringServiceServer
// for forward compatibility
type CCOMonitoringServiceServer interface {
	GetRsrpReports(*NoParam, CCOMonitoringService_GetRsrpReportsServer) error
	GetCellInfo(*NoParam, CCOMonitoringService_GetCellInfoServer) error
	SetCellPTX(context.Context, *CellInfo) (*Response, error)
	GetOcn(context.Context, *GetOcnRequest) (*GetOcnResponse, error)
	mustEmbedUnimplementedCCOMonitoringServiceServer()
}

// UnimplementedCCOMonitoringServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCCOMonitoringServiceServer struct {
}

func (UnimplementedCCOMonitoringServiceServer) GetRsrpReports(*NoParam, CCOMonitoringService_GetRsrpReportsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetRsrpReports not implemented")
}
func (UnimplementedCCOMonitoringServiceServer) GetCellInfo(*NoParam, CCOMonitoringService_GetCellInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCellInfo not implemented")
}
func (UnimplementedCCOMonitoringServiceServer) SetCellPTX(context.Context, *CellInfo) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCellPTX not implemented")
}
func (UnimplementedCCOMonitoringServiceServer) GetOcn(context.Context, *GetOcnRequest) (*GetOcnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOcn not implemented")
}
func (UnimplementedCCOMonitoringServiceServer) mustEmbedUnimplementedCCOMonitoringServiceServer() {}

// UnsafeCCOMonitoringServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CCOMonitoringServiceServer will
// result in compilation errors.
type UnsafeCCOMonitoringServiceServer interface {
	mustEmbedUnimplementedCCOMonitoringServiceServer()
}

func RegisterCCOMonitoringServiceServer(s grpc.ServiceRegistrar, srv CCOMonitoringServiceServer) {
	s.RegisterService(&CCOMonitoringService_ServiceDesc, srv)
}

func _CCOMonitoringService_GetRsrpReports_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CCOMonitoringServiceServer).GetRsrpReports(m, &cCOMonitoringServiceGetRsrpReportsServer{stream})
}

type CCOMonitoringService_GetRsrpReportsServer interface {
	Send(*RsrpInfo) error
	grpc.ServerStream
}

type cCOMonitoringServiceGetRsrpReportsServer struct {
	grpc.ServerStream
}

func (x *cCOMonitoringServiceGetRsrpReportsServer) Send(m *RsrpInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _CCOMonitoringService_GetCellInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(NoParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CCOMonitoringServiceServer).GetCellInfo(m, &cCOMonitoringServiceGetCellInfoServer{stream})
}

type CCOMonitoringService_GetCellInfoServer interface {
	Send(*CellInfo) error
	grpc.ServerStream
}

type cCOMonitoringServiceGetCellInfoServer struct {
	grpc.ServerStream
}

func (x *cCOMonitoringServiceGetCellInfoServer) Send(m *CellInfo) error {
	return x.ServerStream.SendMsg(m)
}

func _CCOMonitoringService_SetCellPTX_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CellInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCOMonitoringServiceServer).SetCellPTX(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cco_mon_service.CCOMonitoringService/SetCellPTX",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCOMonitoringServiceServer).SetCellPTX(ctx, req.(*CellInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CCOMonitoringService_GetOcn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOcnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CCOMonitoringServiceServer).GetOcn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cco_mon_service.CCOMonitoringService/GetOcn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CCOMonitoringServiceServer).GetOcn(ctx, req.(*GetOcnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CCOMonitoringService_ServiceDesc is the grpc.ServiceDesc for CCOMonitoringService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CCOMonitoringService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cco_mon_service.CCOMonitoringService",
	HandlerType: (*CCOMonitoringServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetCellPTX",
			Handler:    _CCOMonitoringService_SetCellPTX_Handler,
		},
		{
			MethodName: "GetOcn",
			Handler:    _CCOMonitoringService_GetOcn_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetRsrpReports",
			Handler:       _CCOMonitoringService_GetRsrpReports_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCellInfo",
			Handler:       _CCOMonitoringService_GetCellInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ccomon.proto",
}
